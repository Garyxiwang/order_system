name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: orderuser
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U orderuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      run: |
        cd server
        pip install -r requirements.txt
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-github-actions
        JWT_SECRET: test-jwt-secret-for-github-actions
        ENVIRONMENT: test
      run: |
        cd server
        python -m pytest test_*.py -v || echo "Tests completed"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd front
        npm ci
    
    - name: Build frontend
      run: |
        cd front
        npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./front
        file: ./front/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # 设置变量
          export IMAGE_TAG="${{ github.sha }}"
          export REGISTRY="${{ env.REGISTRY }}"
          export REPO_NAME="${{ github.repository }}"
          
          # 进入项目目录
          cd /home/www/order_system
          
          # 拉取最新代码
          git pull origin main || git pull origin master
          
          # 登录到GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          
          # 创建生产环境的docker-compose配置
          cat > docker-compose.production.yml << EOF
          version: '3.8'
          
          services:
            nginx:
              image: nginx:alpine
              container_name: order_system_nginx
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.production.conf:/etc/nginx/conf.d/default.conf
                - ./logs/nginx:/var/log/nginx
              depends_on:
                - frontend
                - backend
              networks:
                - order_system_network
              restart: unless-stopped
          
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
              container_name: order_system_frontend
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=http://localhost/api
              networks:
                - order_system_network
              restart: unless-stopped
              depends_on:
                - backend
          
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
              container_name: order_system_backend
              ports:
                - "8000:8000"
              environment:
                - ENVIRONMENT=production
                - DATABASE_URL=postgresql://orderuser:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/order_system
                - SECRET_KEY=${{ secrets.SECRET_KEY }}
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
                - REDIS_URL=redis://redis:6379/0
              volumes:
                - ./logs/backend:/app/logs
                - ./server/uploads:/app/uploads
              networks:
                - order_system_network
              restart: unless-stopped
              depends_on:
                postgres:
                  condition: service_healthy
                redis:
                  condition: service_healthy
          
            postgres:
              image: postgres:15-alpine
              container_name: order_system_database
              environment:
                - POSTGRES_DB=order_system
                - POSTGRES_USER=orderuser
                - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql
              networks:
                - order_system_network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U orderuser"]
                interval: 10s
                timeout: 5s
                retries: 5
              restart: unless-stopped
              ports:
                - "5432:5432"
          
            redis:
              image: redis:7-alpine
              container_name: order_system_redis
              command: redis-server --appendonly yes
              volumes:
                - redis_data:/data
              networks:
                - order_system_network
              restart: unless-stopped
              ports:
                - "6379:6379"
          
          volumes:
            postgres_data:
            redis_data:
          
          networks:
            order_system_network:
              driver: bridge
          EOF
          
          # 停止旧容器
          docker-compose -f docker-compose.production.yml down || true
          
          # 启动新容器
          docker-compose -f docker-compose.production.yml up -d
          
          # 清理旧镜像
          docker image prune -f
          
          # 健康检查
          sleep 30
          echo "正在进行健康检查..."
          
          # 检查容器状态
          docker-compose -f docker-compose.production.yml ps
          
          # 检查后端API
          for i in {1..5}; do
            if curl -f http://localhost/api/health 2>/dev/null; then
              echo "✅ 后端健康检查通过"
              break
            else
              echo "⏳ 等待后端启动... ($i/5)"
              sleep 10
            fi
          done
          
          # 检查前端
          if curl -f http://localhost/ 2>/dev/null; then
            echo "✅ 前端健康检查通过"
          else
            echo "⚠️ 前端可能需要更多时间启动"
          fi
          
          echo "✅ 部署成功完成!"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 部署成功! 应用已更新到最新版本"
        else
          echo "❌ 部署失败! 请检查日志"
          exit 1
        fi